In bash, 'ctrl-r' searches your command history as you type

Input from the commandline as if it were a file by replacing
    'command < file.in' with 'command <<< "some input text"'

command substitution

    '^' is a sed-like operator to replace chars from last command
        'ls docs; ^docs^web^' is equal to 'ls web'. The second argument can be empty.

    !!:n selects the nth argument of the last command, and !$ the last arg
        ls file1 file2 file3; cat !!:1-2 # shows all files and cats only 1 and 2

    recover a previous command
        $ apt-get install package
        $ sudo !!

    !-n to run a command n lines back

    run a command that most recently starts with "apt-get"
        !apt-get

    run a command that most recently contains "some"
        !?some?

    !!:s/wrong/right

    select the Nth argument or range of args from the last command
        $ ls /var/www/website/images/large/
        $ cd !!:1

        $ tar -cvzf filename.tar.gz file1 file2 file3 file4 file5
        $ !!:-2 !!:3-5 !!:$
        tar -cvzf filename.tar.gz file1 file2 file3 file5

'nohup ./long_script &' to leave stuff in background even if you logout

'cd -' change to the previous directory you were working on

Useful tools
    htop
    apt-file

Schedule for later
    echo start_backup.sh | at midnight

ls -la | column -t

run jobs in parallel easily
    ls *.png | parallel -j4 convert {} {.}.jpg

ssh -R 12345:localhost:22 server.com "sleep 1000; exit"' forwards
    server.com's port 12345 to your local ssh port, even if you machine
    is not externally visible on the net.
    Now you can 'ssh localhost -p 12345' from server.com and you will
    log into your machine.

'socat TCP4-LISTEN:1234,fork TCP4:192.168.1.1:22' forwards your port
    1234 to another machine's port 22. Very useful for quick NAT redirection.

Some tools to monitor network connections and bandwith:
  'lsof -i' monitors network connections in real time
  'iftop' shows bandwith usage per *connection*
  'nethogs' shows the bandwith usage per *process*

Use this trick on .ssh/config to directly access 'host2' which is on a private
    network, and must be accessed by ssh-ing into 'host1' first
    Host host2
        ProxyCommand ssh -T host1 'nc %h %p'
            HostName host2

Pipe a compressed file over ssh to avoid creating large temporary .tgz files
  'tar cz folder/ | ssh server "tar xz"' or even better, use 'rsync'
